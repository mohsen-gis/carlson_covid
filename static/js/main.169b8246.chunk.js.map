{"version":3,"sources":["img/logo.png","GraphComponent.js","NavigationComponent.js","GridComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","_","require","GraphComponent","state","aggregated","getTotals","key","data","reduce","sum","obj","properties","props","fieldName","getSelectedTotals","selectedGeoids","includes","geoid","buildNumericalGraphData","stateData","entry","date","total","length","selected","componentDidUpdate","prevProps","prevState","viewed","selectedFeatures","type","forEach","feature","push","getProperties","Object","keys","counts","countBy","datedData","levels","level","category","setState","getNumericalGraph","getCategoricalGraph","getGraph","this","Component","RadioComponent","Grid","container","item","direction","justify","style","backgroundColor","xs","href","src","Logo","alt","height","width","alignItems","Tooltip","title","aria-label","Button","variant","GridComponent","class","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.169b8246.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.76537688.png\";","import React, { Component } from 'react';\nimport {\n    BarChart, ComposedChart, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer, Bar, Cell, Line\n} from 'recharts';\n\nvar _ = require('lodash')\n\nexport default class GraphComponent extends Component { \n    state = {\n        aggregated: null\n    }\n\n    // get the totals for each date, all features\n    getTotals = (key, data) => {\n        return _.reduce(data[key], (sum, obj) => {return sum + obj.properties[this.props.fieldName]}, 0)\n    }\n\n    // get the totals for each date, only the selected features\n    getSelectedTotals = (key, data, selectedGeoids) => {\n        return _.reduce(data[key],\n            (sum, obj) => {\n                // only count if name is a selected geoid\n                if (selectedGeoids.includes(obj.properties.geoid)) {\n                    return sum + obj.properties[this.props.fieldName]\n                }\n                return sum\n            }, 0)\n    }\n\n    //stateData for total since it is faster, whatever dataset is currently viewed for selected\n    buildNumericalGraphData = (key, stateData, data, selectedGeoids) => {\n        // create an object with date total, selected\n        var entry = {date:key,\n            total: this.getTotals(key, stateData)}\n            if (selectedGeoids.length > 0) {\n                // only add selected if there are features selected\n                entry.selected = this.getSelectedTotals(key, data, selectedGeoids)\n            }\n        return entry\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevProps.stateData !== this.props.stateData || prevProps.data !== this.props.data\n            || prevProps.viewed !== this.props.viewed || prevProps.selected !== this.props.selected\n            || prevProps.date !== this.props.date || prevProps.selectedFeatures !== this.props.selectedFeatures) {\n\n            var aggregated = []\n            var data = null\n            if (this.props.type === 'numerical' && this.props.stateData != null) {\n\n                var selectedGeoids = []\n                this.props.selectedFeatures.forEach(feature => {\n                    selectedGeoids.push(feature.getProperties().geoid)\n                })\n\n                data = this.props.stateData\n                Object.keys(data).forEach((key) => {\n                    aggregated.push(this.buildNumericalGraphData(key, this.props.stateData, this.props.data,\n                        selectedGeoids))\n                });\n\n            } else if (this.props.type === 'categorical') {\n                var counts = 0\n                // if we have features selected use them\n                if (this.props.selectedFeatures.length !== 0) {\n                    // aggregate by pulling from the selected features\n                    counts = _.countBy(this.props.selectedFeatures, obj => {\n                        return obj.getProperties()[this.props.fieldName]\n                    })\n                } else if (this.props.data != null) {\n                    // aggregate by all the data from that date\n                    var datedData = this.props.data[this.props.date]\n                    counts = _.countBy(datedData, obj => {\n                        return obj.properties[this.props.fieldName]\n                    })\n                }\n                this.props.levels.forEach(level => {\n                    aggregated.push({category: level, total: counts[level] == null ? 0 : counts[level]})\n                })\n           \n              \n            }\n            this.setState({aggregated: aggregated})\n        }\n    }\n\n    getNumericalGraph = () => {\n        return (\n            //http://recharts.org/en-US/examples/BiaxialLineChart\n            //TODO: better fix bug with rapidly jumping window at 1.5 aspect ratio (on my monitor)  \n            // <div style={{ width: '100%', height: '100%' }}>\n           <div>\n            <ResponsiveContainer aspect={1}>\n                <ComposedChart data={this.state.aggregated} margin={{top: 0, right: 0, left: 10, bottom: 0}}>\n                    <XAxis dataKey ='date'/>\n                    <YAxis yAxisId='left' />\n                    <YAxis yAxisId='right' orientation='right' />\n                    <Tooltip />\n                    <Legend />\n                    <Bar yAxisId='left' dataKey='total' name={'Total ' + this.props.fieldName} fill='#8884d8'/>\n                    <Line yAxisId='right' dataKey='selected' name={'Selected ' + this.props.fieldName} stroke='#ff0000'/>\n                </ComposedChart>\n            </ResponsiveContainer>\n            </div>\n        );\n    }\n\n    getCategoricalGraph = () => {\n        return (\n            //TODO: better fix bug with rapidly jumping window at 1.5 aspect ratio (on my monitor)\n            <ResponsiveContainer aspect={1}>\n                <BarChart data={this.state.aggregated} margin={{top: 0, right: 0, left: 10, bottom: 0}}>\n                    <XAxis dataKey = 'category' />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey='total' name={'Total ' + this.props.fieldName}>\n                        {\n                            // can only set colors if aggregated is set\n                            this.state.aggregated != null ?\n                                this.state.aggregated.map((obj, i) => {\n                                  \n                              \n                                    // NOTE:assumes that this.state.aggregated and metadata levels are in same order\n                                    // this should be the case since aggregate is set based on levels order\n                                    return <Cell fill={this.props.colors[i]} />;\n                                }) : null\n                        }\n                    </Bar>\n                </BarChart>\n            </ResponsiveContainer>\n        );\n    }\n\n    getGraph = () => {\n        return this.props.type === 'categorical' ? this.getCategoricalGraph() : this.getNumericalGraph();\n    }\n\n    render() {\n        return this.getGraph()\n    }\n}","import React, { Component } from 'react';\nimport { Grid, Button, Tooltip} from '@material-ui/core';\nimport Logo from \"./img/logo.png\";\n\n\nvar aboutText = \"This web page was created by Dr. David Haynes' lab at the University of Minnesota. \" +\n    \"COVID data is from the New York Time repository. Clusters are calculated daily using the Pysal library.\"\n\nexport default class RadioComponent extends Component {\n\n    render() {\n        return (\n            <Grid container item direction=\"row\" justify=\"left\"\n            style={{backgroundColor: '#ffcc33'}}>\n                 <Grid item xs={7}>\n                    <a href=\"https://healthinformatics.umn.edu/\">\n                        <img src={Logo} alt=\"University of Minnesota Logo\" height=\"100vh\" width=\"100%\"/>\n                    </a>\n                </Grid>\n                <Grid item xs={3}>\n                    <h1>COVID Tracking Platform</h1>\n                </Grid >\n                <Grid container justify=\"flex-end\" alignItems=\"center\"  xs={2}>\n                    <Grid item>\n                        <a href=\"https://david-haynes-ds3k.squarespace.com/\">\n                            <Tooltip title={aboutText} aria-label=\"about\">\n                                <Button variant=\"outlined\">About</Button>\n                            </Tooltip>\n                        </a>\n                    </Grid>\n                    <Grid item>\n                    <a href=\"mailto:dahaynes@umn.edu\">\n                        <Button variant=\"outlined\">Help</Button>\n                    </a>\n                </Grid> \n                </Grid>\n            </Grid>\n    );\n    }\n}","import React from \"react\"\nimport './App.css';\nimport GraphComponent  from './GraphComponent.js';\nimport NavigationComponent from \"./NavigationComponent\";\nimport { Grid, Box } from '@material-ui/core';\n\nclass GridComponent extends React.Component{\n\nrender(){\n    return(\n        <div>\n            <NavigationComponent />\n        \n        <div class=\"grid-container\">\n\n        <div class=\"flex-child11 magenta\">\n        <GraphComponent  />\n        butts go here\n        </div>\n        \n        <div class=\"flex-child12 green\">\n        <GraphComponent  />\n        buttons go here\n        </div>\n        \n        <div class=\"flex-child21 magenta\">\n        <GraphComponent  />\n        alaki nagoo\n        </div>\n        \n        <div class=\"flex-child22 green\">\n        <GraphComponent  />\n        menu component goes here\n        </div>\n    </div>\n    </div>  \n\n\n    )\n}\n\n\n}\n\nexport default GridComponent;","import React from 'react';\nimport './App.css';\nimport GridComponent from './GridComponent.js'\nfunction App() {\n  return (\n<div >\n  This is a test1\n    <GridComponent />\n    This is a test2\n\n</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    This is a test 3\n    <App />\n    This is a test 4\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}